<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:beans="http://www.springframework.org/schema/beans"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xmlns:tx="http://www.springframework.org/schema/tx"
   xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
   <aop:aspectj-autoproxy />
   <context:component-scan base-package="main" />
   <context:component-scan base-package="kr" />
   <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
   
   <!-- Enables the Spring MVC @Controller programming model -->
   <annotation-driven />

   <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
   <resources mapping="/resources/**" location="/resources/" />
   
      <!-- ################ spring에서 제공하는 API -->
   <beans:bean id="ds" class="org.springframework.jndi.JndiObjectFactoryBean">
       <beans:property name="jndiName" value="jdbc/myspring"/>
       <beans:property name="resourceRef" value="true"/>
    </beans:bean> 
     
   <beans:bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
       <beans:property name="dataSource" ref="ds"/>
    </beans:bean> 
    
   <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
   <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      <beans:property name="prefix" value="/WEB-INF/" />
      <beans:property name="suffix" value=".jsp" />
      <beans:property name="order" value="2"/>
   </beans:bean>

<!-- 	####tiles를 사용하기 위한 설정###################################################################-->
	<!-- tiles설정파일등록 -->
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/config/tiles-config.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	<beans:bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles2.TilesView"/>
		<beans:property name="order" value="1"/>	
	</beans:bean>
	
   <!-- #########################MyBatis등록################################## -->
   <beans:bean id ="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      <beans:property name="dataSource" ref="ds" /> <!-- db연동 -->
      <beans:property name="configLocation" value="/WEB-INF/config/mybatis-config.xml"/>
   </beans:bean>
   
   <!-- sqlsessionfactory를 이용해 sql을 직접명령을 내릴수 있도록 하는것 -->
   <beans:bean id ="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
      <beans:constructor-arg ref="sqlSessionFactory"/>
   </beans:bean>
   
   <!-- #########################인터셉터 등록######################### -->
<!--    <interceptors>
      <interceptor>
         <mapping path="/*"/>
         <beans:bean class = "advanced.TimeCheckInterceptor"/>
      </interceptor>
   </interceptors> -->
   
 <!--   <interceptors>
      <beans:bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
         <beans:property name="paramName" value="lang1"></beans:property>
      </beans:bean>
      <interceptor>
         <mapping path="/list.do"/>
         <mapping path="/tree.do"/>
         <beans:bean class = "emp.controller.LoginCheckInterceptor"/>
      </interceptor>
   </interceptors> -->
   
   <!-- 국제화 처리(다국어지원) -->
   <!-- .properties파일에 입력한 내용을 읽어들여서 페이지에 출력할 메시지를 만들 수 있도록 지원해주는 MessageSource등록 -->
   <beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
      <beans:property name="basenames">
         <beans:list>
            <beans:value>/WEB-INF/i18n/message</beans:value>
         </beans:list>
      </beans:property>
   </beans:bean>
   <beans:bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"/>
      
   <!-- ======================== 선언적트랜잭션 처리 ========================  -->
   <!-- 1. spring내부에서 jdbc를 이용해서 db작업을 할때 트랜잭션 처리를 할 수 있도록 정의해 놓은 클래스를 등록(Advice - 공통모듈 : 여러곳에서 트랜잭션 처리를 하기 때문) 
         => db와 연결되어 있어야 트랜잭션에 관련된 메소드를 실행할 수 있다. (데이터 소스 설정)-->
   <beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
         <beans:property name="dataSource" ref="ds"/>
   </beans:bean>
   <!-- 2. 내가 원하는 메소드가 호출될때 트랜잭션 처리를 해야 하므로 aop로 처리(1번에서 등록한 bean이 aspect될 수 있도록 처리)-->
         <!-- 1) Advice등록 -->
   <tx:advice id="txAdvice" transaction-manager="transactionManager">
      <tx:attributes>
         <tx:method name="txInsert" rollback-for="Exception"/>
      </tx:attributes>
   </tx:advice>
   
   <!-- 2) 실제로 우리가 작성한 advice가 실행될 수 있도록 aop설정 -->
   <!-- <aop:config>
      <aop:pointcut expression="execution(* emp.service.EmpServiceImpl.*(..))" id="trans"/>
      <aop:advisor id="txtadvisor" advice-ref="txAdvice" pointcut-ref="trans"/>
   </aop:config> -->
   
   <!-- ========================파일업로드============================== -->
   <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
   		<beans:property name="maxUploadSize" value="4000000"></beans:property>  
   </beans:bean>
   
</beans:beans>